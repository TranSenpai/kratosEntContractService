// Code generated by ent, DO NOT EDIT.

package ent

import (
	"dormitory/internal/ent/contract"
	schema "dormitory/internal/ent/schema"
	"time"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	contractFields := schema.Contract{}.Fields()
	_ = contractFields
	// contractDescStudentCode is the schema descriptor for student_code field.
	contractDescStudentCode := contractFields[0].Descriptor()
	// contract.StudentCodeValidator is a validator for the "student_code" field. It is called by the builders before save.
	contract.StudentCodeValidator = func() func(string) error {
		validators := contractDescStudentCode.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(student_code string) error {
			for _, fn := range fns {
				if err := fn(student_code); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// contractDescFirstName is the schema descriptor for first_name field.
	contractDescFirstName := contractFields[1].Descriptor()
	// contract.FirstNameValidator is a validator for the "first_name" field. It is called by the builders before save.
	contract.FirstNameValidator = func() func(string) error {
		validators := contractDescFirstName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(first_name string) error {
			for _, fn := range fns {
				if err := fn(first_name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// contractDescLastName is the schema descriptor for last_name field.
	contractDescLastName := contractFields[2].Descriptor()
	// contract.LastNameValidator is a validator for the "last_name" field. It is called by the builders before save.
	contract.LastNameValidator = func() func(string) error {
		validators := contractDescLastName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(last_name string) error {
			for _, fn := range fns {
				if err := fn(last_name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// contractDescMiddleName is the schema descriptor for middle_name field.
	contractDescMiddleName := contractFields[3].Descriptor()
	// contract.MiddleNameValidator is a validator for the "middle_name" field. It is called by the builders before save.
	contract.MiddleNameValidator = contractDescMiddleName.Validators[0].(func(string) error)
	// contractDescEmail is the schema descriptor for email field.
	contractDescEmail := contractFields[4].Descriptor()
	// contract.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	contract.EmailValidator = func() func(string) error {
		validators := contractDescEmail.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(email string) error {
			for _, fn := range fns {
				if err := fn(email); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// contractDescSign is the schema descriptor for sign field.
	contractDescSign := contractFields[5].Descriptor()
	// contract.SignValidator is a validator for the "sign" field. It is called by the builders before save.
	contract.SignValidator = contractDescSign.Validators[0].(func(string) error)
	// contractDescPhone is the schema descriptor for phone field.
	contractDescPhone := contractFields[6].Descriptor()
	// contract.PhoneValidator is a validator for the "phone" field. It is called by the builders before save.
	contract.PhoneValidator = func() func(string) error {
		validators := contractDescPhone.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(phone string) error {
			for _, fn := range fns {
				if err := fn(phone); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// contractDescIsActive is the schema descriptor for is_active field.
	contractDescIsActive := contractFields[11].Descriptor()
	// contract.DefaultIsActive holds the default value on creation for the is_active field.
	contract.DefaultIsActive = contractDescIsActive.Default.(bool)
	// contractDescRegistryAt is the schema descriptor for registry_at field.
	contractDescRegistryAt := contractFields[12].Descriptor()
	// contract.DefaultRegistryAt holds the default value on creation for the registry_at field.
	contract.DefaultRegistryAt = contractDescRegistryAt.Default.(time.Time)
	// contractDescRoomID is the schema descriptor for room_id field.
	contractDescRoomID := contractFields[13].Descriptor()
	// contract.RoomIDValidator is a validator for the "room_id" field. It is called by the builders before save.
	contract.RoomIDValidator = contractDescRoomID.Validators[0].(func(string) error)
}
