// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"dormitory/internal/ent/contract"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ContractCreate is the builder for creating a Contract entity.
type ContractCreate struct {
	config
	mutation *ContractMutation
	hooks    []Hook
}

// SetStudentCode sets the "student_code" field.
func (cc *ContractCreate) SetStudentCode(s string) *ContractCreate {
	cc.mutation.SetStudentCode(s)
	return cc
}

// SetFirstName sets the "first_name" field.
func (cc *ContractCreate) SetFirstName(s string) *ContractCreate {
	cc.mutation.SetFirstName(s)
	return cc
}

// SetLastName sets the "last_name" field.
func (cc *ContractCreate) SetLastName(s string) *ContractCreate {
	cc.mutation.SetLastName(s)
	return cc
}

// SetMiddleName sets the "middle_name" field.
func (cc *ContractCreate) SetMiddleName(s string) *ContractCreate {
	cc.mutation.SetMiddleName(s)
	return cc
}

// SetEmail sets the "email" field.
func (cc *ContractCreate) SetEmail(s string) *ContractCreate {
	cc.mutation.SetEmail(s)
	return cc
}

// SetSign sets the "sign" field.
func (cc *ContractCreate) SetSign(s string) *ContractCreate {
	cc.mutation.SetSign(s)
	return cc
}

// SetPhone sets the "phone" field.
func (cc *ContractCreate) SetPhone(s string) *ContractCreate {
	cc.mutation.SetPhone(s)
	return cc
}

// SetGender sets the "gender" field.
func (cc *ContractCreate) SetGender(u uint8) *ContractCreate {
	cc.mutation.SetGender(u)
	return cc
}

// SetDob sets the "dob" field.
func (cc *ContractCreate) SetDob(t time.Time) *ContractCreate {
	cc.mutation.SetDob(t)
	return cc
}

// SetNillableDob sets the "dob" field if the given value is not nil.
func (cc *ContractCreate) SetNillableDob(t *time.Time) *ContractCreate {
	if t != nil {
		cc.SetDob(*t)
	}
	return cc
}

// SetAddress sets the "address" field.
func (cc *ContractCreate) SetAddress(s string) *ContractCreate {
	cc.mutation.SetAddress(s)
	return cc
}

// SetAvatar sets the "avatar" field.
func (cc *ContractCreate) SetAvatar(b []byte) *ContractCreate {
	cc.mutation.SetAvatar(b)
	return cc
}

// SetIsActive sets the "is_active" field.
func (cc *ContractCreate) SetIsActive(b bool) *ContractCreate {
	cc.mutation.SetIsActive(b)
	return cc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (cc *ContractCreate) SetNillableIsActive(b *bool) *ContractCreate {
	if b != nil {
		cc.SetIsActive(*b)
	}
	return cc
}

// SetRegistryAt sets the "registry_at" field.
func (cc *ContractCreate) SetRegistryAt(t time.Time) *ContractCreate {
	cc.mutation.SetRegistryAt(t)
	return cc
}

// SetNillableRegistryAt sets the "registry_at" field if the given value is not nil.
func (cc *ContractCreate) SetNillableRegistryAt(t *time.Time) *ContractCreate {
	if t != nil {
		cc.SetRegistryAt(*t)
	}
	return cc
}

// SetRoomID sets the "room_id" field.
func (cc *ContractCreate) SetRoomID(s string) *ContractCreate {
	cc.mutation.SetRoomID(s)
	return cc
}

// SetNotificationChannels sets the "notification_channels" field.
func (cc *ContractCreate) SetNotificationChannels(u uint8) *ContractCreate {
	cc.mutation.SetNotificationChannels(u)
	return cc
}

// Mutation returns the ContractMutation object of the builder.
func (cc *ContractCreate) Mutation() *ContractMutation {
	return cc.mutation
}

// Save creates the Contract in the database.
func (cc *ContractCreate) Save(ctx context.Context) (*Contract, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ContractCreate) SaveX(ctx context.Context) *Contract {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ContractCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ContractCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *ContractCreate) defaults() {
	if _, ok := cc.mutation.IsActive(); !ok {
		v := contract.DefaultIsActive
		cc.mutation.SetIsActive(v)
	}
	if _, ok := cc.mutation.RegistryAt(); !ok {
		v := contract.DefaultRegistryAt
		cc.mutation.SetRegistryAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ContractCreate) check() error {
	if _, ok := cc.mutation.StudentCode(); !ok {
		return &ValidationError{Name: "student_code", err: errors.New(`ent: missing required field "Contract.student_code"`)}
	}
	if v, ok := cc.mutation.StudentCode(); ok {
		if err := contract.StudentCodeValidator(v); err != nil {
			return &ValidationError{Name: "student_code", err: fmt.Errorf(`ent: validator failed for field "Contract.student_code": %w`, err)}
		}
	}
	if _, ok := cc.mutation.FirstName(); !ok {
		return &ValidationError{Name: "first_name", err: errors.New(`ent: missing required field "Contract.first_name"`)}
	}
	if v, ok := cc.mutation.FirstName(); ok {
		if err := contract.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "Contract.first_name": %w`, err)}
		}
	}
	if _, ok := cc.mutation.LastName(); !ok {
		return &ValidationError{Name: "last_name", err: errors.New(`ent: missing required field "Contract.last_name"`)}
	}
	if v, ok := cc.mutation.LastName(); ok {
		if err := contract.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "Contract.last_name": %w`, err)}
		}
	}
	if _, ok := cc.mutation.MiddleName(); !ok {
		return &ValidationError{Name: "middle_name", err: errors.New(`ent: missing required field "Contract.middle_name"`)}
	}
	if v, ok := cc.mutation.MiddleName(); ok {
		if err := contract.MiddleNameValidator(v); err != nil {
			return &ValidationError{Name: "middle_name", err: fmt.Errorf(`ent: validator failed for field "Contract.middle_name": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "Contract.email"`)}
	}
	if v, ok := cc.mutation.Email(); ok {
		if err := contract.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Contract.email": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Sign(); !ok {
		return &ValidationError{Name: "sign", err: errors.New(`ent: missing required field "Contract.sign"`)}
	}
	if v, ok := cc.mutation.Sign(); ok {
		if err := contract.SignValidator(v); err != nil {
			return &ValidationError{Name: "sign", err: fmt.Errorf(`ent: validator failed for field "Contract.sign": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Phone(); !ok {
		return &ValidationError{Name: "phone", err: errors.New(`ent: missing required field "Contract.phone"`)}
	}
	if v, ok := cc.mutation.Phone(); ok {
		if err := contract.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "Contract.phone": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Gender(); !ok {
		return &ValidationError{Name: "gender", err: errors.New(`ent: missing required field "Contract.gender"`)}
	}
	if _, ok := cc.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "Contract.address"`)}
	}
	if _, ok := cc.mutation.Avatar(); !ok {
		return &ValidationError{Name: "avatar", err: errors.New(`ent: missing required field "Contract.avatar"`)}
	}
	if _, ok := cc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "Contract.is_active"`)}
	}
	if _, ok := cc.mutation.RegistryAt(); !ok {
		return &ValidationError{Name: "registry_at", err: errors.New(`ent: missing required field "Contract.registry_at"`)}
	}
	if _, ok := cc.mutation.RoomID(); !ok {
		return &ValidationError{Name: "room_id", err: errors.New(`ent: missing required field "Contract.room_id"`)}
	}
	if v, ok := cc.mutation.RoomID(); ok {
		if err := contract.RoomIDValidator(v); err != nil {
			return &ValidationError{Name: "room_id", err: fmt.Errorf(`ent: validator failed for field "Contract.room_id": %w`, err)}
		}
	}
	if _, ok := cc.mutation.NotificationChannels(); !ok {
		return &ValidationError{Name: "notification_channels", err: errors.New(`ent: missing required field "Contract.notification_channels"`)}
	}
	return nil
}

func (cc *ContractCreate) sqlSave(ctx context.Context) (*Contract, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *ContractCreate) createSpec() (*Contract, *sqlgraph.CreateSpec) {
	var (
		_node = &Contract{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(contract.Table, sqlgraph.NewFieldSpec(contract.FieldID, field.TypeInt))
	)
	if value, ok := cc.mutation.StudentCode(); ok {
		_spec.SetField(contract.FieldStudentCode, field.TypeString, value)
		_node.StudentCode = value
	}
	if value, ok := cc.mutation.FirstName(); ok {
		_spec.SetField(contract.FieldFirstName, field.TypeString, value)
		_node.FirstName = value
	}
	if value, ok := cc.mutation.LastName(); ok {
		_spec.SetField(contract.FieldLastName, field.TypeString, value)
		_node.LastName = value
	}
	if value, ok := cc.mutation.MiddleName(); ok {
		_spec.SetField(contract.FieldMiddleName, field.TypeString, value)
		_node.MiddleName = value
	}
	if value, ok := cc.mutation.Email(); ok {
		_spec.SetField(contract.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := cc.mutation.Sign(); ok {
		_spec.SetField(contract.FieldSign, field.TypeString, value)
		_node.Sign = value
	}
	if value, ok := cc.mutation.Phone(); ok {
		_spec.SetField(contract.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := cc.mutation.Gender(); ok {
		_spec.SetField(contract.FieldGender, field.TypeUint8, value)
		_node.Gender = value
	}
	if value, ok := cc.mutation.Dob(); ok {
		_spec.SetField(contract.FieldDob, field.TypeTime, value)
		_node.Dob = value
	}
	if value, ok := cc.mutation.Address(); ok {
		_spec.SetField(contract.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := cc.mutation.Avatar(); ok {
		_spec.SetField(contract.FieldAvatar, field.TypeBytes, value)
		_node.Avatar = value
	}
	if value, ok := cc.mutation.IsActive(); ok {
		_spec.SetField(contract.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := cc.mutation.RegistryAt(); ok {
		_spec.SetField(contract.FieldRegistryAt, field.TypeTime, value)
		_node.RegistryAt = value
	}
	if value, ok := cc.mutation.RoomID(); ok {
		_spec.SetField(contract.FieldRoomID, field.TypeString, value)
		_node.RoomID = value
	}
	if value, ok := cc.mutation.NotificationChannels(); ok {
		_spec.SetField(contract.FieldNotificationChannels, field.TypeUint8, value)
		_node.NotificationChannels = value
	}
	return _node, _spec
}

// ContractCreateBulk is the builder for creating many Contract entities in bulk.
type ContractCreateBulk struct {
	config
	err      error
	builders []*ContractCreate
}

// Save creates the Contract entities in the database.
func (ccb *ContractCreateBulk) Save(ctx context.Context) ([]*Contract, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Contract, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ContractMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ContractCreateBulk) SaveX(ctx context.Context) []*Contract {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ContractCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ContractCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
