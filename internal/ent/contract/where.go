// Code generated by ent, DO NOT EDIT.

package contract

import (
	"dormitory/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Contract {
	return predicate.Contract(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Contract {
	return predicate.Contract(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Contract {
	return predicate.Contract(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Contract {
	return predicate.Contract(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Contract {
	return predicate.Contract(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Contract {
	return predicate.Contract(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Contract {
	return predicate.Contract(sql.FieldLTE(FieldID, id))
}

// StudentCode applies equality check predicate on the "student_code" field. It's identical to StudentCodeEQ.
func StudentCode(v string) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldStudentCode, v))
}

// FirstName applies equality check predicate on the "first_name" field. It's identical to FirstNameEQ.
func FirstName(v string) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldFirstName, v))
}

// LastName applies equality check predicate on the "last_name" field. It's identical to LastNameEQ.
func LastName(v string) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldLastName, v))
}

// MiddleName applies equality check predicate on the "middle_name" field. It's identical to MiddleNameEQ.
func MiddleName(v string) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldMiddleName, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldEmail, v))
}

// Sign applies equality check predicate on the "sign" field. It's identical to SignEQ.
func Sign(v string) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldSign, v))
}

// Phone applies equality check predicate on the "phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldPhone, v))
}

// Gender applies equality check predicate on the "gender" field. It's identical to GenderEQ.
func Gender(v uint8) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldGender, v))
}

// Dob applies equality check predicate on the "dob" field. It's identical to DobEQ.
func Dob(v time.Time) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldDob, v))
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldAddress, v))
}

// Avatar applies equality check predicate on the "avatar" field. It's identical to AvatarEQ.
func Avatar(v []byte) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldAvatar, v))
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldIsActive, v))
}

// RegistryAt applies equality check predicate on the "registry_at" field. It's identical to RegistryAtEQ.
func RegistryAt(v time.Time) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldRegistryAt, v))
}

// RoomID applies equality check predicate on the "room_id" field. It's identical to RoomIDEQ.
func RoomID(v string) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldRoomID, v))
}

// NotificationChannels applies equality check predicate on the "notification_channels" field. It's identical to NotificationChannelsEQ.
func NotificationChannels(v uint8) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldNotificationChannels, v))
}

// StudentCodeEQ applies the EQ predicate on the "student_code" field.
func StudentCodeEQ(v string) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldStudentCode, v))
}

// StudentCodeNEQ applies the NEQ predicate on the "student_code" field.
func StudentCodeNEQ(v string) predicate.Contract {
	return predicate.Contract(sql.FieldNEQ(FieldStudentCode, v))
}

// StudentCodeIn applies the In predicate on the "student_code" field.
func StudentCodeIn(vs ...string) predicate.Contract {
	return predicate.Contract(sql.FieldIn(FieldStudentCode, vs...))
}

// StudentCodeNotIn applies the NotIn predicate on the "student_code" field.
func StudentCodeNotIn(vs ...string) predicate.Contract {
	return predicate.Contract(sql.FieldNotIn(FieldStudentCode, vs...))
}

// StudentCodeGT applies the GT predicate on the "student_code" field.
func StudentCodeGT(v string) predicate.Contract {
	return predicate.Contract(sql.FieldGT(FieldStudentCode, v))
}

// StudentCodeGTE applies the GTE predicate on the "student_code" field.
func StudentCodeGTE(v string) predicate.Contract {
	return predicate.Contract(sql.FieldGTE(FieldStudentCode, v))
}

// StudentCodeLT applies the LT predicate on the "student_code" field.
func StudentCodeLT(v string) predicate.Contract {
	return predicate.Contract(sql.FieldLT(FieldStudentCode, v))
}

// StudentCodeLTE applies the LTE predicate on the "student_code" field.
func StudentCodeLTE(v string) predicate.Contract {
	return predicate.Contract(sql.FieldLTE(FieldStudentCode, v))
}

// StudentCodeContains applies the Contains predicate on the "student_code" field.
func StudentCodeContains(v string) predicate.Contract {
	return predicate.Contract(sql.FieldContains(FieldStudentCode, v))
}

// StudentCodeHasPrefix applies the HasPrefix predicate on the "student_code" field.
func StudentCodeHasPrefix(v string) predicate.Contract {
	return predicate.Contract(sql.FieldHasPrefix(FieldStudentCode, v))
}

// StudentCodeHasSuffix applies the HasSuffix predicate on the "student_code" field.
func StudentCodeHasSuffix(v string) predicate.Contract {
	return predicate.Contract(sql.FieldHasSuffix(FieldStudentCode, v))
}

// StudentCodeEqualFold applies the EqualFold predicate on the "student_code" field.
func StudentCodeEqualFold(v string) predicate.Contract {
	return predicate.Contract(sql.FieldEqualFold(FieldStudentCode, v))
}

// StudentCodeContainsFold applies the ContainsFold predicate on the "student_code" field.
func StudentCodeContainsFold(v string) predicate.Contract {
	return predicate.Contract(sql.FieldContainsFold(FieldStudentCode, v))
}

// FirstNameEQ applies the EQ predicate on the "first_name" field.
func FirstNameEQ(v string) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldFirstName, v))
}

// FirstNameNEQ applies the NEQ predicate on the "first_name" field.
func FirstNameNEQ(v string) predicate.Contract {
	return predicate.Contract(sql.FieldNEQ(FieldFirstName, v))
}

// FirstNameIn applies the In predicate on the "first_name" field.
func FirstNameIn(vs ...string) predicate.Contract {
	return predicate.Contract(sql.FieldIn(FieldFirstName, vs...))
}

// FirstNameNotIn applies the NotIn predicate on the "first_name" field.
func FirstNameNotIn(vs ...string) predicate.Contract {
	return predicate.Contract(sql.FieldNotIn(FieldFirstName, vs...))
}

// FirstNameGT applies the GT predicate on the "first_name" field.
func FirstNameGT(v string) predicate.Contract {
	return predicate.Contract(sql.FieldGT(FieldFirstName, v))
}

// FirstNameGTE applies the GTE predicate on the "first_name" field.
func FirstNameGTE(v string) predicate.Contract {
	return predicate.Contract(sql.FieldGTE(FieldFirstName, v))
}

// FirstNameLT applies the LT predicate on the "first_name" field.
func FirstNameLT(v string) predicate.Contract {
	return predicate.Contract(sql.FieldLT(FieldFirstName, v))
}

// FirstNameLTE applies the LTE predicate on the "first_name" field.
func FirstNameLTE(v string) predicate.Contract {
	return predicate.Contract(sql.FieldLTE(FieldFirstName, v))
}

// FirstNameContains applies the Contains predicate on the "first_name" field.
func FirstNameContains(v string) predicate.Contract {
	return predicate.Contract(sql.FieldContains(FieldFirstName, v))
}

// FirstNameHasPrefix applies the HasPrefix predicate on the "first_name" field.
func FirstNameHasPrefix(v string) predicate.Contract {
	return predicate.Contract(sql.FieldHasPrefix(FieldFirstName, v))
}

// FirstNameHasSuffix applies the HasSuffix predicate on the "first_name" field.
func FirstNameHasSuffix(v string) predicate.Contract {
	return predicate.Contract(sql.FieldHasSuffix(FieldFirstName, v))
}

// FirstNameEqualFold applies the EqualFold predicate on the "first_name" field.
func FirstNameEqualFold(v string) predicate.Contract {
	return predicate.Contract(sql.FieldEqualFold(FieldFirstName, v))
}

// FirstNameContainsFold applies the ContainsFold predicate on the "first_name" field.
func FirstNameContainsFold(v string) predicate.Contract {
	return predicate.Contract(sql.FieldContainsFold(FieldFirstName, v))
}

// LastNameEQ applies the EQ predicate on the "last_name" field.
func LastNameEQ(v string) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldLastName, v))
}

// LastNameNEQ applies the NEQ predicate on the "last_name" field.
func LastNameNEQ(v string) predicate.Contract {
	return predicate.Contract(sql.FieldNEQ(FieldLastName, v))
}

// LastNameIn applies the In predicate on the "last_name" field.
func LastNameIn(vs ...string) predicate.Contract {
	return predicate.Contract(sql.FieldIn(FieldLastName, vs...))
}

// LastNameNotIn applies the NotIn predicate on the "last_name" field.
func LastNameNotIn(vs ...string) predicate.Contract {
	return predicate.Contract(sql.FieldNotIn(FieldLastName, vs...))
}

// LastNameGT applies the GT predicate on the "last_name" field.
func LastNameGT(v string) predicate.Contract {
	return predicate.Contract(sql.FieldGT(FieldLastName, v))
}

// LastNameGTE applies the GTE predicate on the "last_name" field.
func LastNameGTE(v string) predicate.Contract {
	return predicate.Contract(sql.FieldGTE(FieldLastName, v))
}

// LastNameLT applies the LT predicate on the "last_name" field.
func LastNameLT(v string) predicate.Contract {
	return predicate.Contract(sql.FieldLT(FieldLastName, v))
}

// LastNameLTE applies the LTE predicate on the "last_name" field.
func LastNameLTE(v string) predicate.Contract {
	return predicate.Contract(sql.FieldLTE(FieldLastName, v))
}

// LastNameContains applies the Contains predicate on the "last_name" field.
func LastNameContains(v string) predicate.Contract {
	return predicate.Contract(sql.FieldContains(FieldLastName, v))
}

// LastNameHasPrefix applies the HasPrefix predicate on the "last_name" field.
func LastNameHasPrefix(v string) predicate.Contract {
	return predicate.Contract(sql.FieldHasPrefix(FieldLastName, v))
}

// LastNameHasSuffix applies the HasSuffix predicate on the "last_name" field.
func LastNameHasSuffix(v string) predicate.Contract {
	return predicate.Contract(sql.FieldHasSuffix(FieldLastName, v))
}

// LastNameEqualFold applies the EqualFold predicate on the "last_name" field.
func LastNameEqualFold(v string) predicate.Contract {
	return predicate.Contract(sql.FieldEqualFold(FieldLastName, v))
}

// LastNameContainsFold applies the ContainsFold predicate on the "last_name" field.
func LastNameContainsFold(v string) predicate.Contract {
	return predicate.Contract(sql.FieldContainsFold(FieldLastName, v))
}

// MiddleNameEQ applies the EQ predicate on the "middle_name" field.
func MiddleNameEQ(v string) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldMiddleName, v))
}

// MiddleNameNEQ applies the NEQ predicate on the "middle_name" field.
func MiddleNameNEQ(v string) predicate.Contract {
	return predicate.Contract(sql.FieldNEQ(FieldMiddleName, v))
}

// MiddleNameIn applies the In predicate on the "middle_name" field.
func MiddleNameIn(vs ...string) predicate.Contract {
	return predicate.Contract(sql.FieldIn(FieldMiddleName, vs...))
}

// MiddleNameNotIn applies the NotIn predicate on the "middle_name" field.
func MiddleNameNotIn(vs ...string) predicate.Contract {
	return predicate.Contract(sql.FieldNotIn(FieldMiddleName, vs...))
}

// MiddleNameGT applies the GT predicate on the "middle_name" field.
func MiddleNameGT(v string) predicate.Contract {
	return predicate.Contract(sql.FieldGT(FieldMiddleName, v))
}

// MiddleNameGTE applies the GTE predicate on the "middle_name" field.
func MiddleNameGTE(v string) predicate.Contract {
	return predicate.Contract(sql.FieldGTE(FieldMiddleName, v))
}

// MiddleNameLT applies the LT predicate on the "middle_name" field.
func MiddleNameLT(v string) predicate.Contract {
	return predicate.Contract(sql.FieldLT(FieldMiddleName, v))
}

// MiddleNameLTE applies the LTE predicate on the "middle_name" field.
func MiddleNameLTE(v string) predicate.Contract {
	return predicate.Contract(sql.FieldLTE(FieldMiddleName, v))
}

// MiddleNameContains applies the Contains predicate on the "middle_name" field.
func MiddleNameContains(v string) predicate.Contract {
	return predicate.Contract(sql.FieldContains(FieldMiddleName, v))
}

// MiddleNameHasPrefix applies the HasPrefix predicate on the "middle_name" field.
func MiddleNameHasPrefix(v string) predicate.Contract {
	return predicate.Contract(sql.FieldHasPrefix(FieldMiddleName, v))
}

// MiddleNameHasSuffix applies the HasSuffix predicate on the "middle_name" field.
func MiddleNameHasSuffix(v string) predicate.Contract {
	return predicate.Contract(sql.FieldHasSuffix(FieldMiddleName, v))
}

// MiddleNameEqualFold applies the EqualFold predicate on the "middle_name" field.
func MiddleNameEqualFold(v string) predicate.Contract {
	return predicate.Contract(sql.FieldEqualFold(FieldMiddleName, v))
}

// MiddleNameContainsFold applies the ContainsFold predicate on the "middle_name" field.
func MiddleNameContainsFold(v string) predicate.Contract {
	return predicate.Contract(sql.FieldContainsFold(FieldMiddleName, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.Contract {
	return predicate.Contract(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.Contract {
	return predicate.Contract(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.Contract {
	return predicate.Contract(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.Contract {
	return predicate.Contract(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.Contract {
	return predicate.Contract(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.Contract {
	return predicate.Contract(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.Contract {
	return predicate.Contract(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.Contract {
	return predicate.Contract(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.Contract {
	return predicate.Contract(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.Contract {
	return predicate.Contract(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.Contract {
	return predicate.Contract(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.Contract {
	return predicate.Contract(sql.FieldContainsFold(FieldEmail, v))
}

// SignEQ applies the EQ predicate on the "sign" field.
func SignEQ(v string) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldSign, v))
}

// SignNEQ applies the NEQ predicate on the "sign" field.
func SignNEQ(v string) predicate.Contract {
	return predicate.Contract(sql.FieldNEQ(FieldSign, v))
}

// SignIn applies the In predicate on the "sign" field.
func SignIn(vs ...string) predicate.Contract {
	return predicate.Contract(sql.FieldIn(FieldSign, vs...))
}

// SignNotIn applies the NotIn predicate on the "sign" field.
func SignNotIn(vs ...string) predicate.Contract {
	return predicate.Contract(sql.FieldNotIn(FieldSign, vs...))
}

// SignGT applies the GT predicate on the "sign" field.
func SignGT(v string) predicate.Contract {
	return predicate.Contract(sql.FieldGT(FieldSign, v))
}

// SignGTE applies the GTE predicate on the "sign" field.
func SignGTE(v string) predicate.Contract {
	return predicate.Contract(sql.FieldGTE(FieldSign, v))
}

// SignLT applies the LT predicate on the "sign" field.
func SignLT(v string) predicate.Contract {
	return predicate.Contract(sql.FieldLT(FieldSign, v))
}

// SignLTE applies the LTE predicate on the "sign" field.
func SignLTE(v string) predicate.Contract {
	return predicate.Contract(sql.FieldLTE(FieldSign, v))
}

// SignContains applies the Contains predicate on the "sign" field.
func SignContains(v string) predicate.Contract {
	return predicate.Contract(sql.FieldContains(FieldSign, v))
}

// SignHasPrefix applies the HasPrefix predicate on the "sign" field.
func SignHasPrefix(v string) predicate.Contract {
	return predicate.Contract(sql.FieldHasPrefix(FieldSign, v))
}

// SignHasSuffix applies the HasSuffix predicate on the "sign" field.
func SignHasSuffix(v string) predicate.Contract {
	return predicate.Contract(sql.FieldHasSuffix(FieldSign, v))
}

// SignEqualFold applies the EqualFold predicate on the "sign" field.
func SignEqualFold(v string) predicate.Contract {
	return predicate.Contract(sql.FieldEqualFold(FieldSign, v))
}

// SignContainsFold applies the ContainsFold predicate on the "sign" field.
func SignContainsFold(v string) predicate.Contract {
	return predicate.Contract(sql.FieldContainsFold(FieldSign, v))
}

// PhoneEQ applies the EQ predicate on the "phone" field.
func PhoneEQ(v string) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldPhone, v))
}

// PhoneNEQ applies the NEQ predicate on the "phone" field.
func PhoneNEQ(v string) predicate.Contract {
	return predicate.Contract(sql.FieldNEQ(FieldPhone, v))
}

// PhoneIn applies the In predicate on the "phone" field.
func PhoneIn(vs ...string) predicate.Contract {
	return predicate.Contract(sql.FieldIn(FieldPhone, vs...))
}

// PhoneNotIn applies the NotIn predicate on the "phone" field.
func PhoneNotIn(vs ...string) predicate.Contract {
	return predicate.Contract(sql.FieldNotIn(FieldPhone, vs...))
}

// PhoneGT applies the GT predicate on the "phone" field.
func PhoneGT(v string) predicate.Contract {
	return predicate.Contract(sql.FieldGT(FieldPhone, v))
}

// PhoneGTE applies the GTE predicate on the "phone" field.
func PhoneGTE(v string) predicate.Contract {
	return predicate.Contract(sql.FieldGTE(FieldPhone, v))
}

// PhoneLT applies the LT predicate on the "phone" field.
func PhoneLT(v string) predicate.Contract {
	return predicate.Contract(sql.FieldLT(FieldPhone, v))
}

// PhoneLTE applies the LTE predicate on the "phone" field.
func PhoneLTE(v string) predicate.Contract {
	return predicate.Contract(sql.FieldLTE(FieldPhone, v))
}

// PhoneContains applies the Contains predicate on the "phone" field.
func PhoneContains(v string) predicate.Contract {
	return predicate.Contract(sql.FieldContains(FieldPhone, v))
}

// PhoneHasPrefix applies the HasPrefix predicate on the "phone" field.
func PhoneHasPrefix(v string) predicate.Contract {
	return predicate.Contract(sql.FieldHasPrefix(FieldPhone, v))
}

// PhoneHasSuffix applies the HasSuffix predicate on the "phone" field.
func PhoneHasSuffix(v string) predicate.Contract {
	return predicate.Contract(sql.FieldHasSuffix(FieldPhone, v))
}

// PhoneEqualFold applies the EqualFold predicate on the "phone" field.
func PhoneEqualFold(v string) predicate.Contract {
	return predicate.Contract(sql.FieldEqualFold(FieldPhone, v))
}

// PhoneContainsFold applies the ContainsFold predicate on the "phone" field.
func PhoneContainsFold(v string) predicate.Contract {
	return predicate.Contract(sql.FieldContainsFold(FieldPhone, v))
}

// GenderEQ applies the EQ predicate on the "gender" field.
func GenderEQ(v uint8) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldGender, v))
}

// GenderNEQ applies the NEQ predicate on the "gender" field.
func GenderNEQ(v uint8) predicate.Contract {
	return predicate.Contract(sql.FieldNEQ(FieldGender, v))
}

// GenderIn applies the In predicate on the "gender" field.
func GenderIn(vs ...uint8) predicate.Contract {
	return predicate.Contract(sql.FieldIn(FieldGender, vs...))
}

// GenderNotIn applies the NotIn predicate on the "gender" field.
func GenderNotIn(vs ...uint8) predicate.Contract {
	return predicate.Contract(sql.FieldNotIn(FieldGender, vs...))
}

// GenderGT applies the GT predicate on the "gender" field.
func GenderGT(v uint8) predicate.Contract {
	return predicate.Contract(sql.FieldGT(FieldGender, v))
}

// GenderGTE applies the GTE predicate on the "gender" field.
func GenderGTE(v uint8) predicate.Contract {
	return predicate.Contract(sql.FieldGTE(FieldGender, v))
}

// GenderLT applies the LT predicate on the "gender" field.
func GenderLT(v uint8) predicate.Contract {
	return predicate.Contract(sql.FieldLT(FieldGender, v))
}

// GenderLTE applies the LTE predicate on the "gender" field.
func GenderLTE(v uint8) predicate.Contract {
	return predicate.Contract(sql.FieldLTE(FieldGender, v))
}

// DobEQ applies the EQ predicate on the "dob" field.
func DobEQ(v time.Time) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldDob, v))
}

// DobNEQ applies the NEQ predicate on the "dob" field.
func DobNEQ(v time.Time) predicate.Contract {
	return predicate.Contract(sql.FieldNEQ(FieldDob, v))
}

// DobIn applies the In predicate on the "dob" field.
func DobIn(vs ...time.Time) predicate.Contract {
	return predicate.Contract(sql.FieldIn(FieldDob, vs...))
}

// DobNotIn applies the NotIn predicate on the "dob" field.
func DobNotIn(vs ...time.Time) predicate.Contract {
	return predicate.Contract(sql.FieldNotIn(FieldDob, vs...))
}

// DobGT applies the GT predicate on the "dob" field.
func DobGT(v time.Time) predicate.Contract {
	return predicate.Contract(sql.FieldGT(FieldDob, v))
}

// DobGTE applies the GTE predicate on the "dob" field.
func DobGTE(v time.Time) predicate.Contract {
	return predicate.Contract(sql.FieldGTE(FieldDob, v))
}

// DobLT applies the LT predicate on the "dob" field.
func DobLT(v time.Time) predicate.Contract {
	return predicate.Contract(sql.FieldLT(FieldDob, v))
}

// DobLTE applies the LTE predicate on the "dob" field.
func DobLTE(v time.Time) predicate.Contract {
	return predicate.Contract(sql.FieldLTE(FieldDob, v))
}

// DobIsNil applies the IsNil predicate on the "dob" field.
func DobIsNil() predicate.Contract {
	return predicate.Contract(sql.FieldIsNull(FieldDob))
}

// DobNotNil applies the NotNil predicate on the "dob" field.
func DobNotNil() predicate.Contract {
	return predicate.Contract(sql.FieldNotNull(FieldDob))
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.Contract {
	return predicate.Contract(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.Contract {
	return predicate.Contract(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.Contract {
	return predicate.Contract(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.Contract {
	return predicate.Contract(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.Contract {
	return predicate.Contract(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.Contract {
	return predicate.Contract(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.Contract {
	return predicate.Contract(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.Contract {
	return predicate.Contract(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.Contract {
	return predicate.Contract(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.Contract {
	return predicate.Contract(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.Contract {
	return predicate.Contract(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.Contract {
	return predicate.Contract(sql.FieldContainsFold(FieldAddress, v))
}

// AvatarEQ applies the EQ predicate on the "avatar" field.
func AvatarEQ(v []byte) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldAvatar, v))
}

// AvatarNEQ applies the NEQ predicate on the "avatar" field.
func AvatarNEQ(v []byte) predicate.Contract {
	return predicate.Contract(sql.FieldNEQ(FieldAvatar, v))
}

// AvatarIn applies the In predicate on the "avatar" field.
func AvatarIn(vs ...[]byte) predicate.Contract {
	return predicate.Contract(sql.FieldIn(FieldAvatar, vs...))
}

// AvatarNotIn applies the NotIn predicate on the "avatar" field.
func AvatarNotIn(vs ...[]byte) predicate.Contract {
	return predicate.Contract(sql.FieldNotIn(FieldAvatar, vs...))
}

// AvatarGT applies the GT predicate on the "avatar" field.
func AvatarGT(v []byte) predicate.Contract {
	return predicate.Contract(sql.FieldGT(FieldAvatar, v))
}

// AvatarGTE applies the GTE predicate on the "avatar" field.
func AvatarGTE(v []byte) predicate.Contract {
	return predicate.Contract(sql.FieldGTE(FieldAvatar, v))
}

// AvatarLT applies the LT predicate on the "avatar" field.
func AvatarLT(v []byte) predicate.Contract {
	return predicate.Contract(sql.FieldLT(FieldAvatar, v))
}

// AvatarLTE applies the LTE predicate on the "avatar" field.
func AvatarLTE(v []byte) predicate.Contract {
	return predicate.Contract(sql.FieldLTE(FieldAvatar, v))
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v bool) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v bool) predicate.Contract {
	return predicate.Contract(sql.FieldNEQ(FieldIsActive, v))
}

// RegistryAtEQ applies the EQ predicate on the "registry_at" field.
func RegistryAtEQ(v time.Time) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldRegistryAt, v))
}

// RegistryAtNEQ applies the NEQ predicate on the "registry_at" field.
func RegistryAtNEQ(v time.Time) predicate.Contract {
	return predicate.Contract(sql.FieldNEQ(FieldRegistryAt, v))
}

// RegistryAtIn applies the In predicate on the "registry_at" field.
func RegistryAtIn(vs ...time.Time) predicate.Contract {
	return predicate.Contract(sql.FieldIn(FieldRegistryAt, vs...))
}

// RegistryAtNotIn applies the NotIn predicate on the "registry_at" field.
func RegistryAtNotIn(vs ...time.Time) predicate.Contract {
	return predicate.Contract(sql.FieldNotIn(FieldRegistryAt, vs...))
}

// RegistryAtGT applies the GT predicate on the "registry_at" field.
func RegistryAtGT(v time.Time) predicate.Contract {
	return predicate.Contract(sql.FieldGT(FieldRegistryAt, v))
}

// RegistryAtGTE applies the GTE predicate on the "registry_at" field.
func RegistryAtGTE(v time.Time) predicate.Contract {
	return predicate.Contract(sql.FieldGTE(FieldRegistryAt, v))
}

// RegistryAtLT applies the LT predicate on the "registry_at" field.
func RegistryAtLT(v time.Time) predicate.Contract {
	return predicate.Contract(sql.FieldLT(FieldRegistryAt, v))
}

// RegistryAtLTE applies the LTE predicate on the "registry_at" field.
func RegistryAtLTE(v time.Time) predicate.Contract {
	return predicate.Contract(sql.FieldLTE(FieldRegistryAt, v))
}

// RoomIDEQ applies the EQ predicate on the "room_id" field.
func RoomIDEQ(v string) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldRoomID, v))
}

// RoomIDNEQ applies the NEQ predicate on the "room_id" field.
func RoomIDNEQ(v string) predicate.Contract {
	return predicate.Contract(sql.FieldNEQ(FieldRoomID, v))
}

// RoomIDIn applies the In predicate on the "room_id" field.
func RoomIDIn(vs ...string) predicate.Contract {
	return predicate.Contract(sql.FieldIn(FieldRoomID, vs...))
}

// RoomIDNotIn applies the NotIn predicate on the "room_id" field.
func RoomIDNotIn(vs ...string) predicate.Contract {
	return predicate.Contract(sql.FieldNotIn(FieldRoomID, vs...))
}

// RoomIDGT applies the GT predicate on the "room_id" field.
func RoomIDGT(v string) predicate.Contract {
	return predicate.Contract(sql.FieldGT(FieldRoomID, v))
}

// RoomIDGTE applies the GTE predicate on the "room_id" field.
func RoomIDGTE(v string) predicate.Contract {
	return predicate.Contract(sql.FieldGTE(FieldRoomID, v))
}

// RoomIDLT applies the LT predicate on the "room_id" field.
func RoomIDLT(v string) predicate.Contract {
	return predicate.Contract(sql.FieldLT(FieldRoomID, v))
}

// RoomIDLTE applies the LTE predicate on the "room_id" field.
func RoomIDLTE(v string) predicate.Contract {
	return predicate.Contract(sql.FieldLTE(FieldRoomID, v))
}

// RoomIDContains applies the Contains predicate on the "room_id" field.
func RoomIDContains(v string) predicate.Contract {
	return predicate.Contract(sql.FieldContains(FieldRoomID, v))
}

// RoomIDHasPrefix applies the HasPrefix predicate on the "room_id" field.
func RoomIDHasPrefix(v string) predicate.Contract {
	return predicate.Contract(sql.FieldHasPrefix(FieldRoomID, v))
}

// RoomIDHasSuffix applies the HasSuffix predicate on the "room_id" field.
func RoomIDHasSuffix(v string) predicate.Contract {
	return predicate.Contract(sql.FieldHasSuffix(FieldRoomID, v))
}

// RoomIDEqualFold applies the EqualFold predicate on the "room_id" field.
func RoomIDEqualFold(v string) predicate.Contract {
	return predicate.Contract(sql.FieldEqualFold(FieldRoomID, v))
}

// RoomIDContainsFold applies the ContainsFold predicate on the "room_id" field.
func RoomIDContainsFold(v string) predicate.Contract {
	return predicate.Contract(sql.FieldContainsFold(FieldRoomID, v))
}

// NotificationChannelsEQ applies the EQ predicate on the "notification_channels" field.
func NotificationChannelsEQ(v uint8) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldNotificationChannels, v))
}

// NotificationChannelsNEQ applies the NEQ predicate on the "notification_channels" field.
func NotificationChannelsNEQ(v uint8) predicate.Contract {
	return predicate.Contract(sql.FieldNEQ(FieldNotificationChannels, v))
}

// NotificationChannelsIn applies the In predicate on the "notification_channels" field.
func NotificationChannelsIn(vs ...uint8) predicate.Contract {
	return predicate.Contract(sql.FieldIn(FieldNotificationChannels, vs...))
}

// NotificationChannelsNotIn applies the NotIn predicate on the "notification_channels" field.
func NotificationChannelsNotIn(vs ...uint8) predicate.Contract {
	return predicate.Contract(sql.FieldNotIn(FieldNotificationChannels, vs...))
}

// NotificationChannelsGT applies the GT predicate on the "notification_channels" field.
func NotificationChannelsGT(v uint8) predicate.Contract {
	return predicate.Contract(sql.FieldGT(FieldNotificationChannels, v))
}

// NotificationChannelsGTE applies the GTE predicate on the "notification_channels" field.
func NotificationChannelsGTE(v uint8) predicate.Contract {
	return predicate.Contract(sql.FieldGTE(FieldNotificationChannels, v))
}

// NotificationChannelsLT applies the LT predicate on the "notification_channels" field.
func NotificationChannelsLT(v uint8) predicate.Contract {
	return predicate.Contract(sql.FieldLT(FieldNotificationChannels, v))
}

// NotificationChannelsLTE applies the LTE predicate on the "notification_channels" field.
func NotificationChannelsLTE(v uint8) predicate.Contract {
	return predicate.Contract(sql.FieldLTE(FieldNotificationChannels, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Contract) predicate.Contract {
	return predicate.Contract(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Contract) predicate.Contract {
	return predicate.Contract(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Contract) predicate.Contract {
	return predicate.Contract(sql.NotPredicates(p))
}
