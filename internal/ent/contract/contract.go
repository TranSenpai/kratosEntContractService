// Code generated by ent, DO NOT EDIT.

package contract

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the contract type in the database.
	Label = "contract"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStudentCode holds the string denoting the student_code field in the database.
	FieldStudentCode = "student_code"
	// FieldFirstName holds the string denoting the first_name field in the database.
	FieldFirstName = "first_name"
	// FieldLastName holds the string denoting the last_name field in the database.
	FieldLastName = "last_name"
	// FieldMiddleName holds the string denoting the middle_name field in the database.
	FieldMiddleName = "middle_name"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldSign holds the string denoting the sign field in the database.
	FieldSign = "sign"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldGender holds the string denoting the gender field in the database.
	FieldGender = "gender"
	// FieldDob holds the string denoting the dob field in the database.
	FieldDob = "dob"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldAvatar holds the string denoting the avatar field in the database.
	FieldAvatar = "avatar"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "is_active"
	// FieldRegistryAt holds the string denoting the registry_at field in the database.
	FieldRegistryAt = "registry_at"
	// FieldRoomID holds the string denoting the room_id field in the database.
	FieldRoomID = "room_id"
	// FieldNotificationChannels holds the string denoting the notification_channels field in the database.
	FieldNotificationChannels = "notification_channels"
	// Table holds the table name of the contract in the database.
	Table = "contracts"
)

// Columns holds all SQL columns for contract fields.
var Columns = []string{
	FieldID,
	FieldStudentCode,
	FieldFirstName,
	FieldLastName,
	FieldMiddleName,
	FieldEmail,
	FieldSign,
	FieldPhone,
	FieldGender,
	FieldDob,
	FieldAddress,
	FieldAvatar,
	FieldIsActive,
	FieldRegistryAt,
	FieldRoomID,
	FieldNotificationChannels,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// StudentCodeValidator is a validator for the "student_code" field. It is called by the builders before save.
	StudentCodeValidator func(string) error
	// FirstNameValidator is a validator for the "first_name" field. It is called by the builders before save.
	FirstNameValidator func(string) error
	// LastNameValidator is a validator for the "last_name" field. It is called by the builders before save.
	LastNameValidator func(string) error
	// MiddleNameValidator is a validator for the "middle_name" field. It is called by the builders before save.
	MiddleNameValidator func(string) error
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// SignValidator is a validator for the "sign" field. It is called by the builders before save.
	SignValidator func(string) error
	// PhoneValidator is a validator for the "phone" field. It is called by the builders before save.
	PhoneValidator func(string) error
	// DefaultIsActive holds the default value on creation for the "is_active" field.
	DefaultIsActive bool
	// DefaultRegistryAt holds the default value on creation for the "registry_at" field.
	DefaultRegistryAt time.Time
	// RoomIDValidator is a validator for the "room_id" field. It is called by the builders before save.
	RoomIDValidator func(string) error
)

// OrderOption defines the ordering options for the Contract queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStudentCode orders the results by the student_code field.
func ByStudentCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStudentCode, opts...).ToFunc()
}

// ByFirstName orders the results by the first_name field.
func ByFirstName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirstName, opts...).ToFunc()
}

// ByLastName orders the results by the last_name field.
func ByLastName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastName, opts...).ToFunc()
}

// ByMiddleName orders the results by the middle_name field.
func ByMiddleName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMiddleName, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// BySign orders the results by the sign field.
func BySign(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSign, opts...).ToFunc()
}

// ByPhone orders the results by the phone field.
func ByPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhone, opts...).ToFunc()
}

// ByGender orders the results by the gender field.
func ByGender(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGender, opts...).ToFunc()
}

// ByDob orders the results by the dob field.
func ByDob(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDob, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByIsActive orders the results by the is_active field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByRegistryAt orders the results by the registry_at field.
func ByRegistryAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegistryAt, opts...).ToFunc()
}

// ByRoomID orders the results by the room_id field.
func ByRoomID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRoomID, opts...).ToFunc()
}

// ByNotificationChannels orders the results by the notification_channels field.
func ByNotificationChannels(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotificationChannels, opts...).ToFunc()
}
