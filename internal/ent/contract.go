// Code generated by ent, DO NOT EDIT.

package ent

import (
	"dormitory/internal/ent/contract"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Contract is the model entity for the Contract schema.
type Contract struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// StudentCode holds the value of the "student_code" field.
	StudentCode string `json:"student_code,omitempty"`
	// FirstName holds the value of the "first_name" field.
	FirstName string `json:"first_name,omitempty"`
	// LastName holds the value of the "last_name" field.
	LastName string `json:"last_name,omitempty"`
	// MiddleName holds the value of the "middle_name" field.
	MiddleName string `json:"middle_name,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Sign holds the value of the "sign" field.
	Sign string `json:"sign,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone string `json:"phone,omitempty"`
	// Gender holds the value of the "gender" field.
	Gender uint8 `json:"gender,omitempty"`
	// Dob holds the value of the "dob" field.
	Dob time.Time `json:"dob,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// Avatar holds the value of the "avatar" field.
	Avatar []byte `json:"avatar,omitempty"`
	// IsActive holds the value of the "is_active" field.
	IsActive bool `json:"is_active,omitempty"`
	// RegistryAt holds the value of the "registry_at" field.
	RegistryAt time.Time `json:"registry_at,omitempty"`
	// RoomID holds the value of the "room_id" field.
	RoomID string `json:"room_id,omitempty"`
	// NotificationChannels holds the value of the "notification_channels" field.
	NotificationChannels uint8 `json:"notification_channels,omitempty"`
	selectValues         sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Contract) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case contract.FieldAvatar:
			values[i] = new([]byte)
		case contract.FieldIsActive:
			values[i] = new(sql.NullBool)
		case contract.FieldID, contract.FieldGender, contract.FieldNotificationChannels:
			values[i] = new(sql.NullInt64)
		case contract.FieldStudentCode, contract.FieldFirstName, contract.FieldLastName, contract.FieldMiddleName, contract.FieldEmail, contract.FieldSign, contract.FieldPhone, contract.FieldAddress, contract.FieldRoomID:
			values[i] = new(sql.NullString)
		case contract.FieldDob, contract.FieldRegistryAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Contract fields.
func (c *Contract) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case contract.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case contract.FieldStudentCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field student_code", values[i])
			} else if value.Valid {
				c.StudentCode = value.String
			}
		case contract.FieldFirstName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field first_name", values[i])
			} else if value.Valid {
				c.FirstName = value.String
			}
		case contract.FieldLastName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_name", values[i])
			} else if value.Valid {
				c.LastName = value.String
			}
		case contract.FieldMiddleName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field middle_name", values[i])
			} else if value.Valid {
				c.MiddleName = value.String
			}
		case contract.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				c.Email = value.String
			}
		case contract.FieldSign:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sign", values[i])
			} else if value.Valid {
				c.Sign = value.String
			}
		case contract.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				c.Phone = value.String
			}
		case contract.FieldGender:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field gender", values[i])
			} else if value.Valid {
				c.Gender = uint8(value.Int64)
			}
		case contract.FieldDob:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field dob", values[i])
			} else if value.Valid {
				c.Dob = value.Time
			}
		case contract.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				c.Address = value.String
			}
		case contract.FieldAvatar:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field avatar", values[i])
			} else if value != nil {
				c.Avatar = *value
			}
		case contract.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				c.IsActive = value.Bool
			}
		case contract.FieldRegistryAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field registry_at", values[i])
			} else if value.Valid {
				c.RegistryAt = value.Time
			}
		case contract.FieldRoomID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field room_id", values[i])
			} else if value.Valid {
				c.RoomID = value.String
			}
		case contract.FieldNotificationChannels:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field notification_channels", values[i])
			} else if value.Valid {
				c.NotificationChannels = uint8(value.Int64)
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Contract.
// This includes values selected through modifiers, order, etc.
func (c *Contract) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// Update returns a builder for updating this Contract.
// Note that you need to call Contract.Unwrap() before calling this method if this Contract
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Contract) Update() *ContractUpdateOne {
	return NewContractClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Contract entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Contract) Unwrap() *Contract {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Contract is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Contract) String() string {
	var builder strings.Builder
	builder.WriteString("Contract(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("student_code=")
	builder.WriteString(c.StudentCode)
	builder.WriteString(", ")
	builder.WriteString("first_name=")
	builder.WriteString(c.FirstName)
	builder.WriteString(", ")
	builder.WriteString("last_name=")
	builder.WriteString(c.LastName)
	builder.WriteString(", ")
	builder.WriteString("middle_name=")
	builder.WriteString(c.MiddleName)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(c.Email)
	builder.WriteString(", ")
	builder.WriteString("sign=")
	builder.WriteString(c.Sign)
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(c.Phone)
	builder.WriteString(", ")
	builder.WriteString("gender=")
	builder.WriteString(fmt.Sprintf("%v", c.Gender))
	builder.WriteString(", ")
	builder.WriteString("dob=")
	builder.WriteString(c.Dob.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(c.Address)
	builder.WriteString(", ")
	builder.WriteString("avatar=")
	builder.WriteString(fmt.Sprintf("%v", c.Avatar))
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", c.IsActive))
	builder.WriteString(", ")
	builder.WriteString("registry_at=")
	builder.WriteString(c.RegistryAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("room_id=")
	builder.WriteString(c.RoomID)
	builder.WriteString(", ")
	builder.WriteString("notification_channels=")
	builder.WriteString(fmt.Sprintf("%v", c.NotificationChannels))
	builder.WriteByte(')')
	return builder.String()
}

// Contracts is a parsable slice of Contract.
type Contracts []*Contract
