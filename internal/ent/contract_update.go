// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratosEntContractService/internal/ent/contract"
	"kratosEntContractService/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ContractUpdate is the builder for updating Contract entities.
type ContractUpdate struct {
	config
	hooks    []Hook
	mutation *ContractMutation
}

// Where appends a list predicates to the ContractUpdate builder.
func (cu *ContractUpdate) Where(ps ...predicate.Contract) *ContractUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetStudentCode sets the "student_code" field.
func (cu *ContractUpdate) SetStudentCode(s string) *ContractUpdate {
	cu.mutation.SetStudentCode(s)
	return cu
}

// SetNillableStudentCode sets the "student_code" field if the given value is not nil.
func (cu *ContractUpdate) SetNillableStudentCode(s *string) *ContractUpdate {
	if s != nil {
		cu.SetStudentCode(*s)
	}
	return cu
}

// SetFirstName sets the "first_name" field.
func (cu *ContractUpdate) SetFirstName(s string) *ContractUpdate {
	cu.mutation.SetFirstName(s)
	return cu
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (cu *ContractUpdate) SetNillableFirstName(s *string) *ContractUpdate {
	if s != nil {
		cu.SetFirstName(*s)
	}
	return cu
}

// SetLastName sets the "last_name" field.
func (cu *ContractUpdate) SetLastName(s string) *ContractUpdate {
	cu.mutation.SetLastName(s)
	return cu
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (cu *ContractUpdate) SetNillableLastName(s *string) *ContractUpdate {
	if s != nil {
		cu.SetLastName(*s)
	}
	return cu
}

// SetMiddleName sets the "middle_name" field.
func (cu *ContractUpdate) SetMiddleName(s string) *ContractUpdate {
	cu.mutation.SetMiddleName(s)
	return cu
}

// SetNillableMiddleName sets the "middle_name" field if the given value is not nil.
func (cu *ContractUpdate) SetNillableMiddleName(s *string) *ContractUpdate {
	if s != nil {
		cu.SetMiddleName(*s)
	}
	return cu
}

// SetEmail sets the "email" field.
func (cu *ContractUpdate) SetEmail(s string) *ContractUpdate {
	cu.mutation.SetEmail(s)
	return cu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (cu *ContractUpdate) SetNillableEmail(s *string) *ContractUpdate {
	if s != nil {
		cu.SetEmail(*s)
	}
	return cu
}

// SetSign sets the "sign" field.
func (cu *ContractUpdate) SetSign(s string) *ContractUpdate {
	cu.mutation.SetSign(s)
	return cu
}

// SetNillableSign sets the "sign" field if the given value is not nil.
func (cu *ContractUpdate) SetNillableSign(s *string) *ContractUpdate {
	if s != nil {
		cu.SetSign(*s)
	}
	return cu
}

// SetPhone sets the "phone" field.
func (cu *ContractUpdate) SetPhone(s string) *ContractUpdate {
	cu.mutation.SetPhone(s)
	return cu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (cu *ContractUpdate) SetNillablePhone(s *string) *ContractUpdate {
	if s != nil {
		cu.SetPhone(*s)
	}
	return cu
}

// SetGender sets the "gender" field.
func (cu *ContractUpdate) SetGender(u uint8) *ContractUpdate {
	cu.mutation.ResetGender()
	cu.mutation.SetGender(u)
	return cu
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (cu *ContractUpdate) SetNillableGender(u *uint8) *ContractUpdate {
	if u != nil {
		cu.SetGender(*u)
	}
	return cu
}

// AddGender adds u to the "gender" field.
func (cu *ContractUpdate) AddGender(u int8) *ContractUpdate {
	cu.mutation.AddGender(u)
	return cu
}

// SetDob sets the "dob" field.
func (cu *ContractUpdate) SetDob(t time.Time) *ContractUpdate {
	cu.mutation.SetDob(t)
	return cu
}

// SetNillableDob sets the "dob" field if the given value is not nil.
func (cu *ContractUpdate) SetNillableDob(t *time.Time) *ContractUpdate {
	if t != nil {
		cu.SetDob(*t)
	}
	return cu
}

// ClearDob clears the value of the "dob" field.
func (cu *ContractUpdate) ClearDob() *ContractUpdate {
	cu.mutation.ClearDob()
	return cu
}

// SetAddress sets the "address" field.
func (cu *ContractUpdate) SetAddress(s string) *ContractUpdate {
	cu.mutation.SetAddress(s)
	return cu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (cu *ContractUpdate) SetNillableAddress(s *string) *ContractUpdate {
	if s != nil {
		cu.SetAddress(*s)
	}
	return cu
}

// SetAvatar sets the "avatar" field.
func (cu *ContractUpdate) SetAvatar(b []byte) *ContractUpdate {
	cu.mutation.SetAvatar(b)
	return cu
}

// SetIsActive sets the "is_active" field.
func (cu *ContractUpdate) SetIsActive(b bool) *ContractUpdate {
	cu.mutation.SetIsActive(b)
	return cu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (cu *ContractUpdate) SetNillableIsActive(b *bool) *ContractUpdate {
	if b != nil {
		cu.SetIsActive(*b)
	}
	return cu
}

// SetRegistryAt sets the "registry_at" field.
func (cu *ContractUpdate) SetRegistryAt(t time.Time) *ContractUpdate {
	cu.mutation.SetRegistryAt(t)
	return cu
}

// SetNillableRegistryAt sets the "registry_at" field if the given value is not nil.
func (cu *ContractUpdate) SetNillableRegistryAt(t *time.Time) *ContractUpdate {
	if t != nil {
		cu.SetRegistryAt(*t)
	}
	return cu
}

// SetRoomID sets the "room_id" field.
func (cu *ContractUpdate) SetRoomID(s string) *ContractUpdate {
	cu.mutation.SetRoomID(s)
	return cu
}

// SetNillableRoomID sets the "room_id" field if the given value is not nil.
func (cu *ContractUpdate) SetNillableRoomID(s *string) *ContractUpdate {
	if s != nil {
		cu.SetRoomID(*s)
	}
	return cu
}

// SetNotificationChannels sets the "notification_channels" field.
func (cu *ContractUpdate) SetNotificationChannels(u uint8) *ContractUpdate {
	cu.mutation.ResetNotificationChannels()
	cu.mutation.SetNotificationChannels(u)
	return cu
}

// SetNillableNotificationChannels sets the "notification_channels" field if the given value is not nil.
func (cu *ContractUpdate) SetNillableNotificationChannels(u *uint8) *ContractUpdate {
	if u != nil {
		cu.SetNotificationChannels(*u)
	}
	return cu
}

// AddNotificationChannels adds u to the "notification_channels" field.
func (cu *ContractUpdate) AddNotificationChannels(u int8) *ContractUpdate {
	cu.mutation.AddNotificationChannels(u)
	return cu
}

// Mutation returns the ContractMutation object of the builder.
func (cu *ContractUpdate) Mutation() *ContractMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ContractUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ContractUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ContractUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ContractUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *ContractUpdate) check() error {
	if v, ok := cu.mutation.StudentCode(); ok {
		if err := contract.StudentCodeValidator(v); err != nil {
			return &ValidationError{Name: "student_code", err: fmt.Errorf(`ent: validator failed for field "Contract.student_code": %w`, err)}
		}
	}
	if v, ok := cu.mutation.FirstName(); ok {
		if err := contract.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "Contract.first_name": %w`, err)}
		}
	}
	if v, ok := cu.mutation.LastName(); ok {
		if err := contract.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "Contract.last_name": %w`, err)}
		}
	}
	if v, ok := cu.mutation.MiddleName(); ok {
		if err := contract.MiddleNameValidator(v); err != nil {
			return &ValidationError{Name: "middle_name", err: fmt.Errorf(`ent: validator failed for field "Contract.middle_name": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Email(); ok {
		if err := contract.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Contract.email": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Sign(); ok {
		if err := contract.SignValidator(v); err != nil {
			return &ValidationError{Name: "sign", err: fmt.Errorf(`ent: validator failed for field "Contract.sign": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Phone(); ok {
		if err := contract.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "Contract.phone": %w`, err)}
		}
	}
	if v, ok := cu.mutation.RoomID(); ok {
		if err := contract.RoomIDValidator(v); err != nil {
			return &ValidationError{Name: "room_id", err: fmt.Errorf(`ent: validator failed for field "Contract.room_id": %w`, err)}
		}
	}
	return nil
}

func (cu *ContractUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(contract.Table, contract.Columns, sqlgraph.NewFieldSpec(contract.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.StudentCode(); ok {
		_spec.SetField(contract.FieldStudentCode, field.TypeString, value)
	}
	if value, ok := cu.mutation.FirstName(); ok {
		_spec.SetField(contract.FieldFirstName, field.TypeString, value)
	}
	if value, ok := cu.mutation.LastName(); ok {
		_spec.SetField(contract.FieldLastName, field.TypeString, value)
	}
	if value, ok := cu.mutation.MiddleName(); ok {
		_spec.SetField(contract.FieldMiddleName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Email(); ok {
		_spec.SetField(contract.FieldEmail, field.TypeString, value)
	}
	if value, ok := cu.mutation.Sign(); ok {
		_spec.SetField(contract.FieldSign, field.TypeString, value)
	}
	if value, ok := cu.mutation.Phone(); ok {
		_spec.SetField(contract.FieldPhone, field.TypeString, value)
	}
	if value, ok := cu.mutation.Gender(); ok {
		_spec.SetField(contract.FieldGender, field.TypeUint8, value)
	}
	if value, ok := cu.mutation.AddedGender(); ok {
		_spec.AddField(contract.FieldGender, field.TypeUint8, value)
	}
	if value, ok := cu.mutation.Dob(); ok {
		_spec.SetField(contract.FieldDob, field.TypeTime, value)
	}
	if cu.mutation.DobCleared() {
		_spec.ClearField(contract.FieldDob, field.TypeTime)
	}
	if value, ok := cu.mutation.Address(); ok {
		_spec.SetField(contract.FieldAddress, field.TypeString, value)
	}
	if value, ok := cu.mutation.Avatar(); ok {
		_spec.SetField(contract.FieldAvatar, field.TypeBytes, value)
	}
	if value, ok := cu.mutation.IsActive(); ok {
		_spec.SetField(contract.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := cu.mutation.RegistryAt(); ok {
		_spec.SetField(contract.FieldRegistryAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.RoomID(); ok {
		_spec.SetField(contract.FieldRoomID, field.TypeString, value)
	}
	if value, ok := cu.mutation.NotificationChannels(); ok {
		_spec.SetField(contract.FieldNotificationChannels, field.TypeUint8, value)
	}
	if value, ok := cu.mutation.AddedNotificationChannels(); ok {
		_spec.AddField(contract.FieldNotificationChannels, field.TypeUint8, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contract.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ContractUpdateOne is the builder for updating a single Contract entity.
type ContractUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ContractMutation
}

// SetStudentCode sets the "student_code" field.
func (cuo *ContractUpdateOne) SetStudentCode(s string) *ContractUpdateOne {
	cuo.mutation.SetStudentCode(s)
	return cuo
}

// SetNillableStudentCode sets the "student_code" field if the given value is not nil.
func (cuo *ContractUpdateOne) SetNillableStudentCode(s *string) *ContractUpdateOne {
	if s != nil {
		cuo.SetStudentCode(*s)
	}
	return cuo
}

// SetFirstName sets the "first_name" field.
func (cuo *ContractUpdateOne) SetFirstName(s string) *ContractUpdateOne {
	cuo.mutation.SetFirstName(s)
	return cuo
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (cuo *ContractUpdateOne) SetNillableFirstName(s *string) *ContractUpdateOne {
	if s != nil {
		cuo.SetFirstName(*s)
	}
	return cuo
}

// SetLastName sets the "last_name" field.
func (cuo *ContractUpdateOne) SetLastName(s string) *ContractUpdateOne {
	cuo.mutation.SetLastName(s)
	return cuo
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (cuo *ContractUpdateOne) SetNillableLastName(s *string) *ContractUpdateOne {
	if s != nil {
		cuo.SetLastName(*s)
	}
	return cuo
}

// SetMiddleName sets the "middle_name" field.
func (cuo *ContractUpdateOne) SetMiddleName(s string) *ContractUpdateOne {
	cuo.mutation.SetMiddleName(s)
	return cuo
}

// SetNillableMiddleName sets the "middle_name" field if the given value is not nil.
func (cuo *ContractUpdateOne) SetNillableMiddleName(s *string) *ContractUpdateOne {
	if s != nil {
		cuo.SetMiddleName(*s)
	}
	return cuo
}

// SetEmail sets the "email" field.
func (cuo *ContractUpdateOne) SetEmail(s string) *ContractUpdateOne {
	cuo.mutation.SetEmail(s)
	return cuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (cuo *ContractUpdateOne) SetNillableEmail(s *string) *ContractUpdateOne {
	if s != nil {
		cuo.SetEmail(*s)
	}
	return cuo
}

// SetSign sets the "sign" field.
func (cuo *ContractUpdateOne) SetSign(s string) *ContractUpdateOne {
	cuo.mutation.SetSign(s)
	return cuo
}

// SetNillableSign sets the "sign" field if the given value is not nil.
func (cuo *ContractUpdateOne) SetNillableSign(s *string) *ContractUpdateOne {
	if s != nil {
		cuo.SetSign(*s)
	}
	return cuo
}

// SetPhone sets the "phone" field.
func (cuo *ContractUpdateOne) SetPhone(s string) *ContractUpdateOne {
	cuo.mutation.SetPhone(s)
	return cuo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (cuo *ContractUpdateOne) SetNillablePhone(s *string) *ContractUpdateOne {
	if s != nil {
		cuo.SetPhone(*s)
	}
	return cuo
}

// SetGender sets the "gender" field.
func (cuo *ContractUpdateOne) SetGender(u uint8) *ContractUpdateOne {
	cuo.mutation.ResetGender()
	cuo.mutation.SetGender(u)
	return cuo
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (cuo *ContractUpdateOne) SetNillableGender(u *uint8) *ContractUpdateOne {
	if u != nil {
		cuo.SetGender(*u)
	}
	return cuo
}

// AddGender adds u to the "gender" field.
func (cuo *ContractUpdateOne) AddGender(u int8) *ContractUpdateOne {
	cuo.mutation.AddGender(u)
	return cuo
}

// SetDob sets the "dob" field.
func (cuo *ContractUpdateOne) SetDob(t time.Time) *ContractUpdateOne {
	cuo.mutation.SetDob(t)
	return cuo
}

// SetNillableDob sets the "dob" field if the given value is not nil.
func (cuo *ContractUpdateOne) SetNillableDob(t *time.Time) *ContractUpdateOne {
	if t != nil {
		cuo.SetDob(*t)
	}
	return cuo
}

// ClearDob clears the value of the "dob" field.
func (cuo *ContractUpdateOne) ClearDob() *ContractUpdateOne {
	cuo.mutation.ClearDob()
	return cuo
}

// SetAddress sets the "address" field.
func (cuo *ContractUpdateOne) SetAddress(s string) *ContractUpdateOne {
	cuo.mutation.SetAddress(s)
	return cuo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (cuo *ContractUpdateOne) SetNillableAddress(s *string) *ContractUpdateOne {
	if s != nil {
		cuo.SetAddress(*s)
	}
	return cuo
}

// SetAvatar sets the "avatar" field.
func (cuo *ContractUpdateOne) SetAvatar(b []byte) *ContractUpdateOne {
	cuo.mutation.SetAvatar(b)
	return cuo
}

// SetIsActive sets the "is_active" field.
func (cuo *ContractUpdateOne) SetIsActive(b bool) *ContractUpdateOne {
	cuo.mutation.SetIsActive(b)
	return cuo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (cuo *ContractUpdateOne) SetNillableIsActive(b *bool) *ContractUpdateOne {
	if b != nil {
		cuo.SetIsActive(*b)
	}
	return cuo
}

// SetRegistryAt sets the "registry_at" field.
func (cuo *ContractUpdateOne) SetRegistryAt(t time.Time) *ContractUpdateOne {
	cuo.mutation.SetRegistryAt(t)
	return cuo
}

// SetNillableRegistryAt sets the "registry_at" field if the given value is not nil.
func (cuo *ContractUpdateOne) SetNillableRegistryAt(t *time.Time) *ContractUpdateOne {
	if t != nil {
		cuo.SetRegistryAt(*t)
	}
	return cuo
}

// SetRoomID sets the "room_id" field.
func (cuo *ContractUpdateOne) SetRoomID(s string) *ContractUpdateOne {
	cuo.mutation.SetRoomID(s)
	return cuo
}

// SetNillableRoomID sets the "room_id" field if the given value is not nil.
func (cuo *ContractUpdateOne) SetNillableRoomID(s *string) *ContractUpdateOne {
	if s != nil {
		cuo.SetRoomID(*s)
	}
	return cuo
}

// SetNotificationChannels sets the "notification_channels" field.
func (cuo *ContractUpdateOne) SetNotificationChannels(u uint8) *ContractUpdateOne {
	cuo.mutation.ResetNotificationChannels()
	cuo.mutation.SetNotificationChannels(u)
	return cuo
}

// SetNillableNotificationChannels sets the "notification_channels" field if the given value is not nil.
func (cuo *ContractUpdateOne) SetNillableNotificationChannels(u *uint8) *ContractUpdateOne {
	if u != nil {
		cuo.SetNotificationChannels(*u)
	}
	return cuo
}

// AddNotificationChannels adds u to the "notification_channels" field.
func (cuo *ContractUpdateOne) AddNotificationChannels(u int8) *ContractUpdateOne {
	cuo.mutation.AddNotificationChannels(u)
	return cuo
}

// Mutation returns the ContractMutation object of the builder.
func (cuo *ContractUpdateOne) Mutation() *ContractMutation {
	return cuo.mutation
}

// Where appends a list predicates to the ContractUpdate builder.
func (cuo *ContractUpdateOne) Where(ps ...predicate.Contract) *ContractUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ContractUpdateOne) Select(field string, fields ...string) *ContractUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Contract entity.
func (cuo *ContractUpdateOne) Save(ctx context.Context) (*Contract, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ContractUpdateOne) SaveX(ctx context.Context) *Contract {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ContractUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ContractUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *ContractUpdateOne) check() error {
	if v, ok := cuo.mutation.StudentCode(); ok {
		if err := contract.StudentCodeValidator(v); err != nil {
			return &ValidationError{Name: "student_code", err: fmt.Errorf(`ent: validator failed for field "Contract.student_code": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.FirstName(); ok {
		if err := contract.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "Contract.first_name": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.LastName(); ok {
		if err := contract.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "Contract.last_name": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.MiddleName(); ok {
		if err := contract.MiddleNameValidator(v); err != nil {
			return &ValidationError{Name: "middle_name", err: fmt.Errorf(`ent: validator failed for field "Contract.middle_name": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Email(); ok {
		if err := contract.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Contract.email": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Sign(); ok {
		if err := contract.SignValidator(v); err != nil {
			return &ValidationError{Name: "sign", err: fmt.Errorf(`ent: validator failed for field "Contract.sign": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Phone(); ok {
		if err := contract.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "Contract.phone": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.RoomID(); ok {
		if err := contract.RoomIDValidator(v); err != nil {
			return &ValidationError{Name: "room_id", err: fmt.Errorf(`ent: validator failed for field "Contract.room_id": %w`, err)}
		}
	}
	return nil
}

func (cuo *ContractUpdateOne) sqlSave(ctx context.Context) (_node *Contract, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(contract.Table, contract.Columns, sqlgraph.NewFieldSpec(contract.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Contract.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, contract.FieldID)
		for _, f := range fields {
			if !contract.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != contract.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.StudentCode(); ok {
		_spec.SetField(contract.FieldStudentCode, field.TypeString, value)
	}
	if value, ok := cuo.mutation.FirstName(); ok {
		_spec.SetField(contract.FieldFirstName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.LastName(); ok {
		_spec.SetField(contract.FieldLastName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.MiddleName(); ok {
		_spec.SetField(contract.FieldMiddleName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Email(); ok {
		_spec.SetField(contract.FieldEmail, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Sign(); ok {
		_spec.SetField(contract.FieldSign, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Phone(); ok {
		_spec.SetField(contract.FieldPhone, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Gender(); ok {
		_spec.SetField(contract.FieldGender, field.TypeUint8, value)
	}
	if value, ok := cuo.mutation.AddedGender(); ok {
		_spec.AddField(contract.FieldGender, field.TypeUint8, value)
	}
	if value, ok := cuo.mutation.Dob(); ok {
		_spec.SetField(contract.FieldDob, field.TypeTime, value)
	}
	if cuo.mutation.DobCleared() {
		_spec.ClearField(contract.FieldDob, field.TypeTime)
	}
	if value, ok := cuo.mutation.Address(); ok {
		_spec.SetField(contract.FieldAddress, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Avatar(); ok {
		_spec.SetField(contract.FieldAvatar, field.TypeBytes, value)
	}
	if value, ok := cuo.mutation.IsActive(); ok {
		_spec.SetField(contract.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.RegistryAt(); ok {
		_spec.SetField(contract.FieldRegistryAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.RoomID(); ok {
		_spec.SetField(contract.FieldRoomID, field.TypeString, value)
	}
	if value, ok := cuo.mutation.NotificationChannels(); ok {
		_spec.SetField(contract.FieldNotificationChannels, field.TypeUint8, value)
	}
	if value, ok := cuo.mutation.AddedNotificationChannels(); ok {
		_spec.AddField(contract.FieldNotificationChannels, field.TypeUint8, value)
	}
	_node = &Contract{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contract.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
